/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _packet_ {
    pub src_address: [::std::os::raw::c_char; 6usize],
    pub dst_address: [::std::os::raw::c_char; 6usize],
    pub data: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout__packet_() {
    assert_eq!(
        ::std::mem::size_of::<_packet_>(),
        18usize,
        concat!("Size of: ", stringify!(_packet_))
    );
    assert_eq!(
        ::std::mem::align_of::<_packet_>(),
        1usize,
        concat!("Alignment of ", stringify!(_packet_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_packet_>())).src_address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_packet_),
            "::",
            stringify!(src_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_packet_>())).dst_address as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_packet_),
            "::",
            stringify!(dst_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_packet_>())).data as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_packet_),
            "::",
            stringify!(data)
        )
    );
}
pub type packet = _packet_;
extern "C" {
    pub fn garble_packet(packets: *mut packet, num: ::std::os::raw::c_int);
}
